/**
 * 
 */
package org.joni.test.meta;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.eaio.uuid.UUID;

/**
 * @author hahkala
 * 
 */
public class MetaFileImpl extends AccessControlledImpl implements MetaFile {

    private static final long serialVersionUID = 1L;
    private boolean _isDir = false;
    private UUID _parent = null;
    List<UUID> _subFiles = null;
    private long _length = 0;
    private UUID _id = null;
    private String _name = null;
    private List<StripeLocation> _stripes = null;
    private int _minStripes = -1;
    private List<KeyPieceLocation> _keyPieces = null;
    private long _blockSize = 10000;
    private boolean _restricted = false;
    private SLA _sla = null;
    private long _lastModified = 0;
    private long _timeCreated = 0;
    private long _padLength = 0;
    private long _stripePadLength = 0;

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return _name + " " + (_isDir ? "d" : "f") + " id: " + _id;
    }

    /**
     * Generates a new File, with autogenerated UUID.
     */
    public MetaFileImpl() {
        _id = new UUID();
        _lastModified = new Date().getTime();
        _timeCreated = _lastModified;
    }

    /**
     * Generates a new File, with autogenerated UUID.
     */
    public MetaFileImpl(UUID id) {
        _id = id;
        _lastModified = new Date().getTime();
        _timeCreated = _lastModified;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#isDirectory()
     */
    @Override
    public boolean isDirectory() {
        return _isDir;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setDirectory(boolean)
     */
    @Override
    public MetaFile setDirectory(boolean isDir) {
        // if there is files in this directory, don't allow setting it as non directory.
        if (isDir == false && _subFiles != null) {
            // if there weren't any files, clean up and set the subfiles to null
            if (_subFiles.size() == 0) {
                _subFiles = null;
            } else {
                throw new IllegalArgumentException("Can't set a directory with files to be not a directory.");
            }
        }
        _isDir = isDir;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getParent()
     */
    @Override
    public UUID getParent() {
        return _parent;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setParent(com.eaio.uuid.UUID)
     */
    @Override
    public MetaFile setParent(UUID id) {
        _parent = id;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#ListFiles()
     */
    @Override
    public List<UUID> listFiles() {
        if (_subFiles == null) {
            return null;
        }
        // return a copy of immutable uuids
        return new ArrayList<UUID>(_subFiles);
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#addFile(org.joni.test.meta.File)
     */
    @Override
    public MetaFile addFile(MetaFile newFile) {
        if (!_isDir) {
            throw new IllegalArgumentException("Cannot add a file to non directory.");
        }
        if (newFile == null) {
            throw new IllegalArgumentException("Cannot add null as a file.");
        }
        if (!_id.equals(newFile.getParent())) {
            throw new IllegalArgumentException("The directory has to be added as a parent first.");
        }
        if (_subFiles == null) {
            _subFiles = new ArrayList<UUID>();
        }
        _subFiles.add(newFile.getId());
        
        setLastModified(new Date().getTime());
        
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#removeFile(com.eaio.uuid.UUID)
     */
    @Override
    public MetaFile removeFile(UUID id) {
        if (!_isDir) {
            throw new IllegalArgumentException("Can't remove file, this is not a directory.");
        }
        if (_subFiles == null) {
            throw new IllegalArgumentException("Can't remove file, no files exist in this directory.");
        }
        if (!_subFiles.remove(id)) {
            throw new IllegalArgumentException("Can't remove file, no such id exists.");
        }
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getLength()
     */
    @Override
    public long getLength() {
        return _length;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getId()
     */
    @Override
    public UUID getId() {
        return _id;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getName()
     */
    @Override
    public String getName() {
        return _name;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setName(java.lang.String)
     */
    @Override
    public MetaFile setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("Name cannot be null.");
        }
        _name = name;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getStripes()
     */
    @Override
    public List<StripeLocation> getStripes() {
        if (_stripes == null) {
            return null;
        }
        return new ArrayList<StripeLocation>(_stripes);
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setStripes(java.util.List)
     */
    @Override
    public MetaFile setStripes(List<StripeLocation> locations) {
        if (locations == null) {
            _stripes = null;
        } else {
            _stripes = new ArrayList<StripeLocation>(locations);
        }
        
        setLastModified(new Date().getTime());
        
        return this;
    }


    /* (non-Javadoc)
     * @see org.joni.test.meta.MetaFile#getMinStripes()
     */
    @Override
    public int getMinStripes() {
        return _minStripes;
    }

    /* (non-Javadoc)
     * @see org.joni.test.meta.MetaFile#setMinStripes(int)
     */
    @Override
    public MetaFile setMinStripes(int minStripes) {
        _minStripes = minStripes;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getKeyPieces()
     */
    @Override
    public List<KeyPieceLocation> getKeyPieces() {
        if (_keyPieces == null) {
            return null;
        }
        return new ArrayList<KeyPieceLocation>(_keyPieces);
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setKeyPieces(java.util.List)
     */
    @Override
    public MetaFile setKeyPieces(List<KeyPieceLocation> locations) {
        if (locations == null) {
            _keyPieces = null;
        } else {
            _keyPieces = new ArrayList<KeyPieceLocation>(locations);
        }
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getACL()
     */
    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setLength(long)
     */
    @Override
    public MetaFile setLength(long length) {
        _length = length;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#setBlockSize(long)
     */
    @Override
    public MetaFile setBlockSize(long size) {
        _blockSize = size;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#getBlockSize()
     */
    @Override
    public long getBlockSize() {
        return _blockSize;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#isAccessDenied()
     */
    @Override
    public boolean isRestricted() {
        return _restricted;
    }

    /**
     * Sets the restricted flag to given value.
     * 
     * @return returns this instance with the flag set to given value.
     */
    public MetaFile setRestricted(boolean restricted) {
        _restricted = restricted;
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.joni.test.meta.File#restricted()
     */
    @Override
    public MetaFile restricted() {
        MetaFileImpl file = new MetaFileImpl(getId());
        file.setDirectory(isDirectory());
        file.setParent(getParent());
        file.setLength(getLength());
        file.setName(getName());
        file.setACL(getACL());
        file.setRestricted(true);
        return file;
    }

    @Override
    public void setSLA(SLA sla) {
        _sla = sla;
        
    }

    @Override
    public SLA getSLA() {
        return _sla;
    }

    public void setLastModified(long time) {
        _lastModified = time; 
    }

    @Override
    public long getLastModified() {
        return _lastModified;
    }

    @Override
    public long getCreated() {
    	return _timeCreated;
    }
    
    @Override
    public int compareTo(MetaFile o) {
        if(o == null){
            throw new IllegalArgumentException("Cannot compare against null");
        }
        return _name.compareTo(o.getName());
    }

    @Override
    public void setPadLength(long padLen) {
        _padLength = padLen;
    }

    @Override
    public long getPadLength() {
        return _padLength;
    }

    @Override
    public void setStripePadLength(long stripePadLen) {
        _stripePadLength = stripePadLen;
    }

    @Override
    public long getStripePadLength() {
        return _stripePadLength;
    }

}
